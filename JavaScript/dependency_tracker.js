const fs = require('fs');
const path = require('path');

function scanForDependencies(directory = '.') {
    const dependencies = new Set();

    function scanDirectory(dir) {
        const files = fs.readdirSync(dir);

        files.forEach(file => {
            const fullPath = path.join(dir, file);

            if (fs.lstatSync(fullPath).isDirectory()) {
                scanDirectory(fullPath);
            } else if (fullPath.endsWith('.js')) {
                const content = fs.readFileSync(fullPath, 'utf-8');
                const matches = content.match(/require\(['"]([^'"]+)['"]\)/g) || [];
                
                matches.forEach(match => {
                    const dep = match.match(/require\(['"]([^'"]+)['"]\)/)[1];
                    if (!dep.startsWith('.')) {  // Ignore local files
                        dependencies.add(dep);
                    }
                });
            }
        });
    }

    scanDirectory(directory);
    return Array.from(dependencies);
}

function generatePackageJson(dependencies, outputPath = 'package.json') {
    const packageJson = {
        name: "autodep-project",
        version: "1.0.0",
        description: "Generated by AutoDep",
        main: "index.js",
        dependencies: {},
        devDependencies: {},
        scripts: {
            test: "echo \"Error: no test specified\" && exit 1"
        },
        author: "",
        license: "MIT"
    };

    dependencies.forEach(dep => {
        packageJson.dependencies[dep] = "*";
    });

    fs.writeFileSync(outputPath, JSON.stringify(packageJson, null, 2));
    console.log(`package.json generated successfully at ${outputPath}.`);
}

if (require.main === module) {
    const args = process.argv.slice(2);
    const directoryArg = args.find(arg => arg.startsWith('--dir=')) || '--dir=.';
    const outputArg = args.find(arg => arg.startsWith('--output=')) || '--output=package.json';

    const directory = directoryArg.split('=')[1];
    const outputPath = outputArg.split('=')[1];

    const dependencies = scanForDependencies(directory);
    generatePackageJson(dependencies, outputPath);
}
